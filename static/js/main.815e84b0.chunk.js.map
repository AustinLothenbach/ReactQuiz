{"version":3,"sources":["images/background.png","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","answer","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","background","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","MEDIUM","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.815e84b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.0c48768f.png\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=28&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n\r\nmax-width: 1100px;\r\nborder-radius: 10px;\r\nborder: 2px solid #fff;\r\npadding: 20px;\r\nbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n\r\np {\r\n    font-size: 1rem;\r\n}\r\n\r\n`\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\ntransition: all 0.3s ease;\r\n\r\n:hover {\r\n    opacity: 0.8;\r\n}\r\nbutton {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({correct, userClicked}) => \r\n    correct ? 'linear-gradient(90deg, #56ffa4, #59bc86)' : !correct && userClicked ? 'linear-gradient(90deg, #ff5656, #c16868)' \r\n    : 'linear-gradient(90deg, #FF8C00, #995400)'\r\n};\r\nborder: 3px solid #fff;\r\nbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\nborder-radius: 10px;\r\ncolor: #fff;\r\n}\r\n`;","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\n\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\n\r\ntype Props = {\r\n    question: string;\r\n    answer: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNumber: number;\r\n    totalQuestions: number;\r\n}\r\n\r\n\r\nconst QuestionCard: React.FC<Props> = ({question, answer, callback, userAnswer, questionNumber, totalQuestions}) => (\r\n\r\n\r\n<Wrapper>\r\n    <p className=\"number\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n    </p>\r\n\r\n    <p dangerouslySetInnerHTML={{__html: question}} />\r\n    <div>\r\n       {answer.map(answer => (\r\n           <ButtonWrapper key={answer}\r\n           correct={userAnswer?.correctAnswer == answer}\r\n           userClicked={userAnswer?.answer === answer}\r\n           >\r\n               <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                   <span dangerouslySetInnerHTML={{__html: answer}} />\r\n               </button>\r\n           </ButtonWrapper>\r\n       ))} \r\n    </div>\r\n</Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nimport background from './images/background.png';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    background-image: url(${background});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    font-family: sans-serif;\r\n}\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n\r\n> p {\r\n    color: #000;\r\n}\r\n.score {\r\n    color: #000;\r\n    margin: 0;\r\n}\r\n\r\nh1 {\r\n    font-family: sans-serif;\r\n}\r\n\r\n.start, .next {\r\n    cursor: pointer;\r\n    border: 2px solid #black;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40pxl\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n}\r\n\r\n\r\n\r\n`","import React, {useState} from 'react';\nimport {fetchQuizQuestions } from './API';\n\n//components \nimport QuestionCard from './components/QuestionCard';\n\nimport { QuestionsState, Difficulty } from './API';\n\nimport { GlobalStyle, Wrapper } from './App.styles';\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.MEDIUM);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => { \n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore(prev => prev + 1);\n\n      const AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, AnswerObject]);\n    }\n\n  };\n\n  const nextQuestion = () => {\n\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  };\n\n  return (\n  <>\n  <GlobalStyle />\n  <Wrapper className=\"App\">\n    <h1>React Automotive Quiz</h1>\n\n    {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      \n      <button className=\"start\" onClick={startQuiz}>Start Quiz</button>\n    \n    ) : null }\n    \n    {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n    {loading && <p>Loading Questions....</p>}\n\n    {!loading && !gameOver && (\n    <QuestionCard\n    questionNumber={number +1}\n    totalQuestions={TOTAL_QUESTIONS}\n    question={questions[number].question}\n    answer={questions[number].answers}\n    userAnswer={userAnswers ? userAnswers[number] : undefined}\n    callback={checkAnswer}\n    /> )} \n\n    {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n    <button className=\"next\" onClick={nextQuestion}>Next Question</button> \n    ) : null}\n  </Wrapper>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}